function Results = evaluateClassification(Results, options)

% -------------------------------------------------------------------------
% Calculate confusion matrices
Results.confusionMatrices = cell(Results.numFolds, 1);
Results.confusionMatrix = zeros(numel(Results.classes));
for numRun = 1:Results.numFolds
    confusionMatrix = zeros(numel(Results.classes));
    
    goldStandard = Results.classGoldStandard{numRun};
    result = Results.classResult{numRun};
    
    for i = 1:numel(Results.classes)
        goldStandard(Results.classGoldStandard{numRun} == Results.classes(i)) = i;
        result(Results.classResult{numRun} == Results.classes(i)) = i;
    end
    
    for i = 1:size(goldStandard, 1)
        confusionMatrix(goldStandard(i), result(i)) = confusionMatrix(goldStandard(i), result(i)) + 1;
    end
    
    Results.confusionMatrices{numRun} = confusionMatrix;
    Results.confusionMatrix = Results.confusionMatrix + Results.confusionMatrices{numRun};
    
    % disp(['Confusion matrix for run ' num2str(numRun) ': ']);
    % disp(confusionMatrix);
end

if options.disp
    disp(['Confusion matrix complete: ']);
    disp(Results.confusionMatrix);
end

Results.confusionMatrixNorm = Results.confusionMatrix;
for i = 1:size(Results.confusionMatrix, 1)
    temp = sum(Results.confusionMatrix(i, :));
    if temp == 0
        temp = 1;
    end
    Results.confusionMatrixNorm(i, :) = Results.confusionMatrix(i, :) ./ temp;
end

if options.disp
    disp(['Confusion matrix complete (normed): ']);
    disp(Results.confusionMatrixNorm);
end

% -------------------------------------------------------------------------
% Calculate classwise averaged classification rate
Results.classificationRate = 0;
for i = 1:size(Results.confusionMatrix, 1)
    Results.classificationRate = Results.classificationRate + Results.confusionMatrixNorm(i, i);
end
Results.classificationRate = Results.classificationRate / size(Results.confusionMatrix, 1);
if options.disp
    disp(['Classification Rate: ' num2str(Results.classificationRate)]);
end

% -------------------------------------------------------------------------
% Calculate ROC curve
if options.roc && numel(Results.classes) == 2
    discriminators = [];
    goldStandard = [];
    
    for numRun = 1:Results.numFolds
        discriminators = [discriminators; Results.discriminators{numRun}];
        goldStandard = [goldStandard; Results.classGoldStandard{numRun}];
    end
    
    stepSize = (max(discriminators) - min(discriminators)) / options.rocSamples;
    thresholdValues = min(discriminators):stepSize:max(discriminators);
    
    Results.rocCurve = zeros(2, numel(thresholdValues));
    
    classes = zeros(size(discriminators));
    for i = 1:numel(thresholdValues)
        classes(discriminators < thresholdValues(i)) = Results.classes(2);
        classes(discriminators >= thresholdValues(i)) = Results.classes(1);
        truePositives = sum((classes == Results.classes(2)) & (goldStandard == Results.classes(2)));
        trueNegatives = sum((classes == Results.classes(1)) & (goldStandard == Results.classes(1)));
        falsePositives = sum((classes == Results.classes(2)) & (goldStandard == Results.classes(1)));
        falseNegatives = sum((classes == Results.classes(1)) & (goldStandard == Results.classes(2)));
        
        Results.rocCurve(1,i) = truePositives / (truePositives + falseNegatives); % Sensitivität
        Results.rocCurve(2,i) = trueNegatives / (trueNegatives + falsePositives); % Specificity
    end
    
    Results.auRoc = 0;
    for i = 2:numel(thresholdValues)
        Results.auRoc = Results.auRoc + ((1 - Results.rocCurve(1,i-1)) - (1 - Results.rocCurve(1,i))) * (Results.rocCurve(2,i) + Results.rocCurve(2,i-1)) / 2;
    end
end

% -------------------------------------------------------------------------
% Reorder classification results 

Results.allGoldstandard = zeros(options.datasetSize, 1) - 1;
Results.allResult = zeros(options.datasetSize, 1) - 1;
Results.allDiscriminators = zeros(options.datasetSize, 1) - 10000;
Results.allCorrect = zeros(options.datasetSize, 1) - 1;
Results.allValid = zeros(options.datasetSize, 1) - 1;
Results.numSamplesClasses = zeros(1, numel(Results.classes));

for numRun = 1:Results.numFolds
    goldStandard = Results.classGoldStandard{numRun};
    result = Results.classResult{numRun};
    idx = Results.testIdx{numRun};
    disc = Results.discriminators{numRun};
    
    Results.allGoldstandard(idx) = goldStandard;
    Results.allResult(idx) = result;
    Results.allCorrect(idx) = double(goldStandard == result);  
    Results.allDiscriminators(idx) = disc;
end

for k = 1:numel(Results.classes)
    Results.numSamplesClasses(k) = sum(double(Results.allGoldstandard == Results.classes(k)));
end

Results.allValid = Results.allGoldstandard ~= -1;

% -------------------------------------------------------------------------
% End
if options.disp
    disp('-----------------------');
end