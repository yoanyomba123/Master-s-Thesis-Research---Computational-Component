function FeatureSelection = selectFeatures(features, classes, additional, description, SelectionOptions)
% Perform feature selection

if strcmp(SelectionOptions.method, 'all')
    featuresIdx = 1:size(features, 2);
    featureRanking = zeros(size(featuresIdx));
elseif strcmp(SelectionOptions.method, 'StrCmp')
    description = description((size(additional, 2) + 2):end);
    
    idxColl = zeros(size(SelectionOptions.compareStrings, 1), numel(description));
    for i = 1:size(SelectionOptions.compareStrings, 1);
        if numel(SelectionOptions.compareStrings{i, 2}) == 0
            for k = 1:numel(description)
                if numel(strfind(description{k}, SelectionOptions.compareStrings{i, 1})) > 0
                    idxColl(i,k) = 1;
                end
            end
        else
            for k = 1:numel(description)
                if (numel(strfind(description{k}, SelectionOptions.compareStrings{i, 1})) > 0) && ...
                   (numel(strfind(description{k}, SelectionOptions.compareStrings{i, 2})) > 0)
                    idxColl(i,k) = 1;
                end
            end
        end
    end
    idxColl = sum(idxColl, 1);
    
    featuresIdx = find(idxColl);
    featureRanking = zeros(size(featuresIdx));
elseif strcmp(SelectionOptions.method, 'bestNext')
    featureRanking = zeros(1, size(features, 2));
    
    crossValidationIdx = SelectionOptions.crossValidationIdx;
    ClassifyOptions = SelectionOptions.ClassifyOptions;
    
    Results.classGoldStandard = cell(size(crossValidationIdx, 1), 1);
    Results.classResult = cell(size(crossValidationIdx, 1), 1);
    Results.numFolds = size(crossValidationIdx, 1);
    Results.classes = ClassifyOptions.classes;
    
    EvaluationOptions.disp = 0;
    
    for runNum = 1:size(crossValidationIdx, 1)
        %disp(['Cross validation. Run: ' num2str(runNum) ' of ' num2str(size(crossValidationIdx, 1))]);
        featuresSet = [];
        featuresOpen = 1:size(features, 2);
        
        for runFeat = 1:SelectionOptions.numFeat
            disp(['We chose the feature ' num2str(runFeat)]);
            featRate = zeros(size(featuresOpen));
            
            for i = 1:numel(featuresOpen)

                trainingFeatures = features(crossValidationIdx{runNum, 1}, [featuresSet featuresOpen(i)]);
                varTraining = var(trainingFeatures);
                validFeatures = varTraining ~= 0;
                trainingFeatures = trainingFeatures(:, validFeatures);
                
                if numel(trainingFeatures) == 0
                    featRate(i) = 0;
                    continue;
                end
                
                classTraining = classes(crossValidationIdx{runNum, 1});

                featRate(i) = classRun(trainingFeatures, classTraining, ClassifyOptions);
            end
            
            [featRateSorted idx] = sort(featRate, 'descend');
            featuresSet = [featuresSet featuresOpen(idx(1))];
            featuresOpen = featuresOpen(featuresOpen ~= featuresOpen(idx(1)));
        end
        
        featureRanking(featuresSet) = featureRanking(featuresSet) + [SelectionOptions.numFeat:-1:1] * 0.3;
    end
    
    [featureRankingSorted idx] = sort(featureRanking, 'descend');
    featuresIdx = idx(1:SelectionOptions.numFeat);
    featureRanking = featureRankingSorted(1:SelectionOptions.numFeat);
elseif strcmp(SelectionOptions.method, 'alternate')
    featureRanking = zeros(1, size(features, 2));
    
    crossValidationIdx = SelectionOptions.crossValidationIdx;
    ClassifyOptions = SelectionOptions.ClassifyOptions;
    
    Results.classGoldStandard = cell(size(crossValidationIdx, 1), 1);
    Results.classResult = cell(size(crossValidationIdx, 1), 1);
    Results.numFolds = size(crossValidationIdx, 1);
    Results.classes = ClassifyOptions.classes;
    
    EvaluationOptions.disp = 0;
    
    
    
    for runNum = 1:size(crossValidationIdx, 1)
        disp(['Cross validation. Run: ' num2str(runNum) ' of ' num2str(size(crossValidationIdx, 1))]);
        featuresSet = [];
        featuresOpen = 1:size(features, 2);
        
        bestRate = 0;
        actRate = 1;
        
        classTraining = classes(crossValidationIdx{runNum, 1});
        
        while numel(featuresSet) < SelectionOptions.numFeat
            % disp(['We chose the feature ' num2str(runFeat)]);
            %disp(['Currently: ' num2str(numel(featuresSet)) ' features - ' num2str(bestRate) ', ' num2str(actRate)]);
   
            bestRateBefore = bestRate;
            featRate = zeros(size(featuresOpen));

            %disp(['Grow: ' num2str(bestRate) ', ' num2str(actRate)]);
            for i = 1:numel(featuresOpen)
                
                trainingFeatures = features(crossValidationIdx{runNum, 1}, [featuresSet featuresOpen(i)]);
                varTraining = var(trainingFeatures);
                validFeatures = varTraining > 0.000001;
                trainingFeatures = trainingFeatures(:, validFeatures);
                
                if numel(trainingFeatures) == 0
                    featRate(i) = 0;
                    continue;
                end
                
                featRate(i) = classRun(trainingFeatures, classTraining, ClassifyOptions);
            end
            
            [featRateSorted idx] = sort(featRate, 'descend');
            actRate = featRateSorted(1);
            
            bestRate = actRate;
            featuresSet = [featuresSet featuresOpen(idx(1))];
            featuresOpen = featuresOpen(featuresOpen ~= featuresOpen(idx(1)));
            
            if numel(featuresSet) >= SelectionOptions.numFeat
                break;
            end

            while actRate >= bestRate && numel(featuresSet) < SelectionOptions.numFeat
                featRate = zeros(size(featuresSet));
                %disp(['Shrink: ' num2str(bestRate) ', ' num2str(actRate)]);
                for i = 1:numel(featuresSet)
                    
                    trainingFeatures = features(crossValidationIdx{runNum, 1}, featuresSet([1:(i-1) (i+1):end]));
                    varTraining = var(trainingFeatures);
                    validFeatures = varTraining > 0.000001;
                    trainingFeatures = trainingFeatures(:, validFeatures);
                    
                    if numel(trainingFeatures) == 0
                        featRate(i) = 0;
                        continue;
                    end
                    
                    featRate(i) = classRun(trainingFeatures, classTraining, ClassifyOptions);
                end
                
                [featRateSorted idx] = sort(featRate, 'descend');
                actRate = featRateSorted(1);
                if actRate >= bestRate
                    bestRate = actRate;
                    featuresOpen = [featuresOpen featuresSet(idx(1))];
                    featuresSet = [featuresSet([1:(idx(1)-1) (idx(1)+1):end])];    
                end
            end
            
            if bestRateBefore == bestRate
                break;
            end
        end
        disp(featuresSet);
        featureRanking(featuresSet) = featureRanking(featuresSet) + ones(size(featuresSet)) ./ numel(featuresSet);
    end
    
    [featureRankingSorted idx] = sort(featureRanking, 'descend');
    featuresIdx = idx(1:SelectionOptions.numFeat);
    featureRanking = featureRankingSorted(1:SelectionOptions.numFeat);
    featureRanking = featureRanking(featureRanking ~= 0);
    featuresIdx = featuresIdx(1:numel(featureRanking));
end

FeatureSelection.idx = featuresIdx;
FeatureSelection.ranking = featureRanking;

end

function featRate = classRun(trainingFeatures, classTraining, ClassifyOptions)
if strcmp(ClassifyOptions.classifier, 'Bayes')
    classResult = classify(trainingFeatures, trainingFeatures, classTraining, ClassifyOptions.BayesSpec, ClassifyOptions.BayesPrior);
elseif strcmp(ClassifyOptions.classifier, 'SVM')
    for i = 1:numel(ClassifyOptions.classes)
        classTraining(classTraining == ClassifyOptions.classes(i)) = i;
    end
    
    training.y = classTraining';
    training.X = trainingFeatures';
    
    if numel(ClassifyOptions.classes) == 2
        model = smo(training,options);
    elseif strcmp(ClassifyOptions.svmMulticlass, 'oaa')
        model = oaasvm(training,options);
    else
        model = oaosvm(training,options);
    end
    
    classResult = svmclass(trainingFeatures',model);
    
    for i = 1:numel(ClassifyOptions.classes)
        classResult(classResult == i) = ClassifyOptions.classes(i);
    end
elseif strcmp(ClassifyOptions.classifier, 'kNN')
    for i = 1:numel(ClassifyOptions.classes)
        classTraining(classTraining == ClassifyOptions.classes(i)) = i;
    end
    
    training.y = classTraining';
    training.X = trainingFeatures';
    
    model = knnrule(training, ClassifyOptions.knnK);
    
    classResult = knnclass(testFeatures',model);
    
    for i = 1:numel(ClassifyOptions.classes)
        classResult(classResult == i) = ClassifyOptions.classes(i);
    end
end

featRate = mean(double(classResult == classTraining));
end

